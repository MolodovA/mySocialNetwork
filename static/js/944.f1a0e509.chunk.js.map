{"version":3,"file":"static/js/944.f1a0e509.chunk.js","mappings":"8SAqBaA,EAAQ,WACnB,IAAMC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,GACrBC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,YAAY,GAGdC,SAAU,SAAAC,GACR,IAAMC,EAA0B,GAWhC,OAVKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAClEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIZI,EAAOH,SAEDG,EAAOH,SAASM,OArBN,IAsBnBF,EAAOJ,SAAW,8CAFlBI,EAAOJ,SAAW,WAIbI,GAETG,SAAU,SAAAJ,GACRT,GAASc,EAAAA,EAAAA,IAAQL,OAIrB,OAAIZ,GACK,SAAC,KAAD,CAAUkB,GAAG,cAGpB,SAAC,KAAD,CAAMC,WAAS,EAACC,eAAe,SAA/B,UACE,SAAC,KAAD,CAAMC,MAAI,EAACD,eAAe,SAA1B,UACE,iBAAMJ,SAAUX,EAAOiB,aAAvB,UACE,SAAC,IAAD,WACE,UAAC,IAAD,YACE,SAAC,KAAD,gBACEC,MAAM,QACNC,OAAO,UAEHnB,EAAOoB,cAAc,UAJ3B,IAKEC,OAAQrB,EAAOsB,cAEhBtB,EAAOuB,QAAQpB,OAASH,EAAOQ,OAAOL,OACrC,gBAAKqB,MAAO,CAAEC,MAAO,QAArB,SAAgCzB,EAAOQ,OAAOL,QAC5C,MACJ,SAAC,KAAD,gBACEuB,KAAK,WACLR,MAAM,WACNC,OAAO,UAEHnB,EAAOoB,cAAc,aAL3B,IAMEC,OAAQrB,EAAOsB,cAEhBtB,EAAOuB,QAAQnB,UAAYJ,EAAOQ,OAAOJ,UACxC,gBAAKoB,MAAO,CAAEC,MAAO,QAArB,SAAgCzB,EAAOQ,OAAOJ,WAC5C,MACJ,SAAC,IAAD,CACEc,MAAM,cACNS,SACE,SAAC,KAAD,QACEC,QAAS5B,EAAOO,OAAOF,YAEnBL,EAAOoB,cAAc,mBAI/B,SAAC,IAAD,CAAQM,KAAK,SAASG,QAAQ,YAAYJ,MAAM,UAAhD","sources":["components/Login/Login.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport { Button, FormControlLabel, Grid } from '@mui/material';\r\nimport Checkbox from '@mui/material/Checkbox/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormGroup from '@mui/material/FormGroup/FormGroup';\r\nimport TextField from '@mui/material/TextField/TextField';\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nimport { getISAuth } from 'redux/selectors/selectorsHeader/selectorsHeader';\r\nimport { loginTC } from 'redux/thunks';\r\n\r\ntype FormikErrorType = {\r\n  email?: string;\r\n  password?: string;\r\n  rememberMe?: boolean;\r\n};\r\n\r\nconst minValidPassLength = 3;\r\nexport const Login = (): any => {\r\n  const isAuth = useSelector(getISAuth);\r\n  const dispatch = useDispatch();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false,\r\n    },\r\n\r\n    validate: values => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = 'Required';\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n      }\r\n      if (!values.password) {\r\n        errors.password = 'Required';\r\n      } else if (values.password.length < minValidPassLength) {\r\n        errors.password = 'password should biggest that three symbols';\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      dispatch(loginTC(values));\r\n    },\r\n  });\r\n\r\n  if (isAuth) {\r\n    return <Navigate to=\"/profile\" />;\r\n  }\r\n  return (\r\n    <Grid container justifyContent=\"center\">\r\n      <Grid item justifyContent=\"center\">\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormControl>\r\n            <FormGroup>\r\n              <TextField\r\n                label=\"Email\"\r\n                margin=\"normal\"\r\n                /* eslint-disable-next-line react/jsx-props-no-spreading */\r\n                {...formik.getFieldProps('email')}\r\n                onBlur={formik.handleBlur}\r\n              />\r\n              {formik.touched.email && formik.errors.email ? (\r\n                <div style={{ color: ' red' }}>{formik.errors.email}</div>\r\n              ) : null}\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                /* eslint-disable-next-line react/jsx-props-no-spreading */\r\n                {...formik.getFieldProps('password')}\r\n                onBlur={formik.handleBlur}\r\n              />\r\n              {formik.touched.password && formik.errors.password ? (\r\n                <div style={{ color: ' red' }}>{formik.errors.password}</div>\r\n              ) : null}\r\n              <FormControlLabel\r\n                label=\"Remember me\"\r\n                control={\r\n                  <Checkbox\r\n                    checked={formik.values.rememberMe}\r\n                    /* eslint-disable-next-line react/jsx-props-no-spreading */\r\n                    {...formik.getFieldProps('rememberMe')}\r\n                  />\r\n                }\r\n              />\r\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n"],"names":["Login","isAuth","useSelector","getISAuth","dispatch","useDispatch","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","loginTC","to","container","justifyContent","item","handleSubmit","label","margin","getFieldProps","onBlur","handleBlur","touched","style","color","type","control","checked","variant"],"sourceRoot":""}